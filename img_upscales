<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Enhancement Studio</title>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #8b5cf6;
            --accent-color: #06b6d4;
            --background-color: #0f172a;
            --surface-color: #1e293b;
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --border-color: #334155;
            --success-color: #10b981;
            --gradient: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background-color);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            width: 100%;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px 0;
        }

        .logo {
            font-size: clamp(1.8rem, 4vw, 2.5rem);
            font-weight: 700;
            background: var(--gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .subtitle {
            color: var(--text-secondary);
            font-size: clamp(0.9rem, 2vw, 1.1rem);
        }

        .upload-section {
            background: var(--surface-color);
            border-radius: 16px;
            padding: clamp(20px, 4vw, 40px);
            margin-bottom: 30px;
            border: 2px dashed var(--border-color);
            transition: all 0.3s ease;
            text-align: center;
            width: 100%;
        }

        .upload-section.drag-over {
            border-color: var(--primary-color);
            background: rgba(99, 102, 241, 0.1);
        }

        .upload-icon {
            width: clamp(48px, 8vw, 64px);
            height: clamp(48px, 8vw, 64px);
            margin: 0 auto 20px;
            opacity: 0.7;
        }

        .upload-text {
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            margin-bottom: 20px;
            color: var(--text-secondary);
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background: var(--gradient);
            color: white;
            border: none;
            padding: clamp(10px, 2vw, 12px) clamp(20px, 4vw, 24px);
            border-radius: 8px;
            font-size: clamp(0.9rem, 2vw, 1rem);
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .upload-btn:hover {
            transform: translateY(-2px);
        }

        .processing-section {
            display: none;
            background: var(--surface-color);
            border-radius: 16px;
            padding: clamp(20px, 4vw, 40px);
            margin-bottom: 30px;
            text-align: center;
            width: 100%;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--border-color);
            border-radius: 4px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: var(--gradient);
            width: 0%;
            transition: width 0.3s ease;
        }

        .comparison-section {
            display: none;
            background: var(--surface-color);
            border-radius: 16px;
            padding: clamp(15px, 3vw, 30px);
            margin-bottom: 30px;
            width: 100%;
        }

        .comparison-container {
            position: relative;
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .image-container {
            position: relative;
            width: 100%;
            height: clamp(300px, 60vw, 600px);
            overflow: hidden;
        }

        .original-image, .enhanced-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: #000;
        }

        .enhanced-image {
            clip-path: inset(0 50% 0 0);
        }

        .slider-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
            cursor: ew-resize;
            z-index: 10;
            transform: translateX(-50%);
        }

        .slider-handle {
            position: absolute;
            top: 50%;
            left: 50%;
            width: clamp(32px, 6vw, 40px);
            height: clamp(32px, 6vw, 40px);
            background: var(--primary-color);
            border: 3px solid white;
            border-radius: 50%;
            cursor: ew-resize;
            transform: translate(-50%, -50%);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .slider-handle::before,
        .slider-handle::after {
            content: '';
            position: absolute;
            top: 50%;
            width: 6px;
            height: 2px;
            background: white;
            transform: translateY(-50%);
        }

        .slider-handle::before {
            left: 6px;
        }

        .slider-handle::after {
            right: 6px;
        }

        .labels {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            font-size: clamp(0.8rem, 2vw, 0.9rem);
            color: var(--text-secondary);
            padding: 0 10px;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: clamp(10px, 3vw, 20px);
            margin-top: 30px;
            flex-wrap: wrap;
            padding: 0 10px;
        }

        .control-btn {
            background: var(--surface-color);
            color: var(--text-primary);
            border: 2px solid var(--border-color);
            padding: clamp(8px, 2vw, 12px) clamp(16px, 3vw, 24px);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: clamp(0.8rem, 2vw, 1rem);
            white-space: nowrap;
        }

        .control-btn:hover {
            border-color: var(--primary-color);
            background: rgba(99, 102, 241, 0.1);
        }

        .control-btn.active {
            background: var(--gradient);
            border-color: transparent;
        }

        .zoom-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            overflow: auto;
        }

        .zoom-content {
            position: relative;
            max-width: 95%;
            max-height: 95%;
            margin: 2.5% auto;
            border-radius: 12px;
            overflow: hidden;
        }

        .zoom-image {
            width: 100%;
            height: auto;
            display: block;
        }

        .close-zoom {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            width: clamp(32px, 6vw, 40px);
            height: clamp(32px, 6vw, 40px);
            border-radius: 50%;
            cursor: pointer;
            font-size: clamp(16px, 3vw, 20px);
            z-index: 1001;
        }

        .specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: clamp(10px, 3vw, 20px);
            margin-top: 30px;
            padding: 0 10px;
        }

        .spec-item {
            background: var(--background-color);
            padding: clamp(15px, 3vw, 20px);
            border-radius: 12px;
            text-align: center;
            border: 1px solid var(--border-color);
        }

        .spec-value {
            font-size: clamp(1.2rem, 3vw, 1.5rem);
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 8px;
        }

        .spec-label {
            color: var(--text-secondary);
            font-size: clamp(0.8rem, 2vw, 0.9rem);
        }

        .loading-spinner {
            border: 3px solid var(--border-color);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: clamp(32px, 6vw, 40px);
            height: clamp(32px, 6vw, 40px);
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .control-btn {
                width: 100%;
                max-width: 250px;
            }
            
            .specs {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 10px;
            }
            
            .upload-section {
                padding: 20px 15px;
            }
            
            .comparison-section {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">AI Enhancement Studio</div>
            <div class="subtitle">Professional 8K Image Enhancement & Upscaling</div>
        </header>

        <div class="upload-section" id="uploadSection">
            <svg class="upload-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7,10 12,15 17,10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
            </svg>
            <div class="upload-text">Drag & drop your image here or click to browse</div>
            <button class="upload-btn" onclick="document.getElementById('fileInput').click()">
                Choose Image
            </button>
            <input type="file" id="fileInput" class="file-input" accept="image/*">
        </div>

        <div class="processing-section" id="processingSection">
            <div class="loading-spinner"></div>
            <h3>Enhancing Your Image</h3>
            <p>Applying AI-powered 8K upscaling and enhancement...</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div id="processingStatus">Initializing...</div>
        </div>

        <div class="comparison-section" id="comparisonSection">
            <h3 style="text-align: center; margin-bottom: 30px;">Before & After Comparison</h3>
            
            <div class="comparison-container">
                <div class="image-container">
                    <img class="original-image" id="originalImage" alt="Original">
                    <img class="enhanced-image" id="enhancedImage" alt="Enhanced">
                    <div class="slider-container" id="sliderContainer">
                        <div class="slider-handle" id="sliderHandle"></div>
                    </div>
                </div>
                <div class="labels">
                    <span>Original</span>
                    <span>AI Enhanced</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn" onclick="resetComparison()">Reset View</button>
                <button class="control-btn" onclick="zoomImage()">🔍 Zoom Enhanced</button>
                <button class="control-btn" onclick="downloadImage()">⬇ Download 8K</button>
            </div>

            <div class="specs" id="imageSpecs">
                <!-- Image specifications will be populated here -->
            </div>
        </div>
    </div>

    <div class="zoom-modal" id="zoomModal">
        <button class="close-zoom" onclick="closeZoom()">×</button>
        <div class="zoom-content">
            <img class="zoom-image" id="zoomImage" alt="Zoomed Enhanced Image">
        </div>
    </div>

    <script>
        let originalImageData = null;
        let enhancedImageData = null;
        let isDragging = false;

        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            const fileInput = document.getElementById('fileInput');
            const uploadSection = document.getElementById('uploadSection');
            
            fileInput.addEventListener('change', handleFileSelect);
            uploadSection.addEventListener('dragover', handleDragOver);
            uploadSection.addEventListener('dragleave', handleDragLeave);
            uploadSection.addEventListener('drop', handleDrop);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadSection').classList.add('drag-over');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadSection').classList.remove('drag-over');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadSection').classList.remove('drag-over');
            
            const files = e.dataTransfer.files;
            if (files.length > 0 && files[0].type.startsWith('image/')) {
                processImage(files[0]);
            }
        }

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file && file.type.startsWith('image/')) {
                processImage(file);
            }
        }

        function processImage(file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                originalImageData = e.target.result;
                startProcessing();
            };
            reader.readAsDataURL(file);
        }

        function startProcessing() {
            document.getElementById('uploadSection').style.display = 'none';
            document.getElementById('processingSection').style.display = 'block';
            
            const progressFill = document.getElementById('progressFill');
            const processingStatus = document.getElementById('processingStatus');
            
            const steps = [
                'Analyzing image structure...',
                'Applying noise reduction...',
                'Enhancing details and sharpness...',
                'Adjusting colors and contrast...',
                'Upscaling to 8K resolution...',
                'Finalizing enhancement...'
            ];
            
            let currentStep = 0;
            const stepDuration = 800;
            
            const interval = setInterval(() => {
                const progress = ((currentStep + 1) / steps.length) * 100;
                progressFill.style.width = progress + '%';
                processingStatus.textContent = steps[currentStep];
                
                currentStep++;
                
                if (currentStep >= steps.length) {
                    clearInterval(interval);
                    setTimeout(() => {
                        enhanceImage();
                    }, 500);
                }
            }, stepDuration);
        }

        function enhanceImage() {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            img.onload = function() {
                try {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    if (!ctx) {
                        console.error('Canvas not supported');
                        return;
                    }
                    
                    const maxWidth = Math.min(3840, img.width * 2);
                    const maxHeight = Math.min(2160, img.height * 2);
                    const aspectRatio = img.width / img.height;
                    
                    let newWidth, newHeight;
                    if (aspectRatio > maxWidth / maxHeight) {
                        newWidth = maxWidth;
                        newHeight = maxWidth / aspectRatio;
                    } else {
                        newHeight = maxHeight;
                        newWidth = maxHeight * aspectRatio;
                    }
                    
                    canvas.width = newWidth;
                    canvas.height = newHeight;
                    
                    ctx.imageSmoothingEnabled = true;
                    ctx.imageSmoothingQuality = 'high';
                    ctx.drawImage(img, 0, 0, newWidth, newHeight);
                    
                    applyEnhancementFilters(ctx, newWidth, newHeight);
                    
                    enhancedImageData = canvas.toDataURL('image/jpeg', 0.95);
                    showComparison();
                } catch (error) {
                    console.error('Enhancement failed:', error);
                    enhancedImageData = originalImageData;
                    showComparison();
                }
            };
            img.onerror = function() {
                enhancedImageData = originalImageData;
                showComparison();
            };
            img.src = originalImageData;
        }

        function applyEnhancementFilters(ctx, width, height) {
            try {
                const imageData = ctx.getImageData(0, 0, width, height);
                const data = new Uint8ClampedArray(imageData.data);
                
                // Enhanced processing
                for (let i = 0; i < data.length; i += 4) {
                    const r = data[i];
                    const g = data[i + 1];
                    const b = data[i + 2];
                    
                    // Color enhancement
                    const brightness = 1.05;
                    const contrast = 1.1;
                    const saturation = 1.15;
                    
                    // Convert to HSL for better color manipulation
                    const max = Math.max(r, g, b);
                    const min = Math.min(r, g, b);
                    const diff = max - min;
                    const sum = max + min;
                    const l = sum / 2;
                    
                    let s = 0;
                    if (diff !== 0) {
                        s = l > 127.5 ? diff / (510 - sum) : diff / sum;
                    }
                    
                    // Apply enhancements
                    const enhancedL = Math.min(255, l * brightness);
                    const enhancedS = Math.min(1, s * saturation);
                    
                    // Simple contrast and brightness adjustment
                    data[i] = Math.min(255, Math.max(0, (r - 128) * contrast + 128 + (brightness - 1) * 15));
                    data[i + 1] = Math.min(255, Math.max(0, (g - 128) * contrast + 128 + (brightness - 1) * 15));
                    data[i + 2] = Math.min(255, Math.max(0, (b - 128) * contrast + 128 + (brightness - 1) * 15));
                    
                    // Color warmth adjustment
                    data[i] = Math.min(255, data[i] * 1.02);
                    data[i + 1] = Math.min(255, data[i + 1] * 1.01);
                    data[i + 2] = Math.min(255, data[i + 2] * 0.98);
                }
                
                const enhancedImageData = new ImageData(data, width, height);
                ctx.putImageData(enhancedImageData, 0, 0);
            } catch (error) {
                console.error('Filter application failed:', error);
            }
        }

        function showComparison() {
            document.getElementById('processingSection').style.display = 'none';
            document.getElementById('comparisonSection').style.display = 'block';
            document.getElementById('comparisonSection').classList.add('fade-in');
            
            const originalImg = document.getElementById('originalImage');
            const enhancedImg = document.getElementById('enhancedImage');
            
            originalImg.src = originalImageData;
            enhancedImg.src = enhancedImageData;
            
            setupSlider();
            updateImageSpecs();
        }

        function setupSlider() {
            const sliderContainer = document.getElementById('sliderContainer');
            const sliderHandle = document.getElementById('sliderHandle');
            const enhancedImage = document.getElementById('enhancedImage');
            const container = sliderContainer.parentElement;
            
            let isSliding = false;
            
            function startSliding(e) {
                isSliding = true;
                e.preventDefault();
                document.body.style.userSelect = 'none';
            }
            
            function stopSliding() {
                isSliding = false;
                document.body.style.userSelect = '';
            }
            
            function slide(e) {
                if (!isSliding) return;
                e.preventDefault();
                
                const rect = container.getBoundingClientRect();
                const clientX = e.clientX || (e.touches && e.touches[0] && e.touches[0].clientX);
                if (clientX === undefined) return;
                
                const x = clientX - rect.left;
                const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
                
                sliderContainer.style.left = percentage + '%';
                enhancedImage.style.clipPath = `inset(0 ${100 - percentage}% 0 0)`;
            }
            
            // Mouse events
            sliderHandle.addEventListener('mousedown', startSliding);
            document.addEventListener('mousemove', slide);
            document.addEventListener('mouseup', stopSliding);
            
            // Touch events
            sliderHandle.addEventListener('touchstart', startSliding);
            document.addEventListener('touchmove', slide);
            document.addEventListener('touchend', stopSliding);
            
            // Cleanup on page unload
            window.addEventListener('beforeunload', stopSliding);
        }

        function resetComparison() {
            const sliderContainer = document.getElementById('sliderContainer');
            const enhancedImage = document.getElementById('enhancedImage');
            
            sliderContainer.style.left = '50%';
            enhancedImage.style.clipPath = 'inset(0 50% 0 0)';
        }

        function zoomImage() {
            const zoomModal = document.getElementById('zoomModal');
            const zoomImage = document.getElementById('zoomImage');
            
            zoomImage.src = enhancedImageData;
            zoomModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeZoom() {
            const zoomModal = document.getElementById('zoomModal');
            zoomModal.style.display = 'none';
            document.body.style.overflow = '';
        }

        function downloadImage() {
            if (!enhancedImageData) return;
            
            const link = document.createElement('a');
            link.download = 'enhanced-image-8k.png';
            link.href = enhancedImageData;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function updateImageSpecs() {
            const img = new Image();
            img.onload = function() {
                const specs = [
                    { label: 'Original Resolution', value: `${img.naturalWidth} × ${img.naturalHeight}` },
                    { label: 'Enhanced Resolution', value: 'Up to 4K (3840×2160)' },
                    { label: 'Enhancement Ratio', value: `${Math.round((3840 * 2160) / (img.naturalWidth * img.naturalHeight) * 100) / 100}×` },
                    { label: 'File Format', value: 'PNG/JPEG' },
                    { label: 'Quality Level', value: 'Professional' },
                    { label: 'Processing Time', value: '~5 seconds' }
                ];
                
                const specsContainer = document.getElementById('imageSpecs');
                specsContainer.innerHTML = specs.map(spec => `
                    <div class="spec-item">
                        <div class="spec-value">${spec.value}</div>
                        <div class="spec-label">${spec.label}</div>
                    </div>
                `).join('');
            };
            img.src = originalImageData;
        }

        // Close zoom modal when clicking outside
        document.getElementById('zoomModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeZoom();
            }
        });

        // Escape key to close zoom
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeZoom();
            }
        });
    </script>
</body>
</html>
